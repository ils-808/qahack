{"uid":"8bd36d6b180a290c","name":"test_update_user_email_already_exist[api-4]","fullName":"tests.endpoints.test_users#test_update_user_email_already_exist","historyId":"5a42c27506029434387362f8290a40cc","time":{"start":1733072751994,"stop":1733072753775,"duration":1781},"status":"failed","statusMessage":"AssertionError: Incorrect response code: 400\nassert 400 == 409\n +  where 400 = <Response [400]>.status_code","statusTrace":"api_client = <api_handler.ApiClient.ApiClient object at 0x7f8575ff0c50>\nx_task_value = 'api-4'\n\n    @allure.feature(\"User API\")\n    @allure.story(\"Update user partially\")\n    @pytest.mark.parametrize(\"x_task_value\", [\"api-4\"])\n    def test_update_user_email_already_exist(api_client, x_task_value):\n        users_response = api_client.get_users(x_task_value, 0)\n        users = Users(**users_response.json())\n    \n        dto = UserBase(email=users.users[0].email, nickname=users.users[0].nickname, password=f.password(), name=f.name())\n        dto.model_dump(exclude_none=True)\n        response = api_client.patch_user(dto, users.users[1].uuid, x_task_value)\n    \n>       assert response.status_code == 409, f\"Incorrect response code: {response.status_code}\"\nE       AssertionError: Incorrect response code: 400\nE       assert 400 == 409\nE        +  where 400 = <Response [400]>.status_code\n\ntests/endpoints/test_users.py:66: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1733072740390,"stop":1733072740391,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"base_url","time":{"start":1733072740391,"stop":1733072740392,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"worker_id","time":{"start":1733072740392,"stop":1733072740392,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"setup_test","time":{"start":1733072740392,"stop":1733072743305,"duration":2913},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"api_client","time":{"start":1733072740392,"stop":1733072740392,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Incorrect response code: 400\nassert 400 == 409\n +  where 400 = <Response [400]>.status_code","statusTrace":"api_client = <api_handler.ApiClient.ApiClient object at 0x7f8575ff0c50>\nx_task_value = 'api-4'\n\n    @allure.feature(\"User API\")\n    @allure.story(\"Update user partially\")\n    @pytest.mark.parametrize(\"x_task_value\", [\"api-4\"])\n    def test_update_user_email_already_exist(api_client, x_task_value):\n        users_response = api_client.get_users(x_task_value, 0)\n        users = Users(**users_response.json())\n    \n        dto = UserBase(email=users.users[0].email, nickname=users.users[0].nickname, password=f.password(), name=f.name())\n        dto.model_dump(exclude_none=True)\n        response = api_client.patch_user(dto, users.users[1].uuid, x_task_value)\n    \n>       assert response.status_code == 409, f\"Incorrect response code: {response.status_code}\"\nE       AssertionError: Incorrect response code: 400\nE       assert 400 == 409\nE        +  where 400 = <Response [400]>.status_code\n\ntests/endpoints/test_users.py:66: AssertionError","steps":[],"attachments":[{"uid":"c59eabf51afac02c","name":"log","source":"c59eabf51afac02c.txt","type":"text/plain","size":2022},{"uid":"25b649fa6c036e1","name":"stderr","source":"25b649fa6c036e1.txt","type":"text/plain","size":2012}],"parameters":[],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup_test::0","time":{"start":1733072760518,"stop":1733072760518,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Update user partially"},{"name":"feature","value":"User API"},{"name":"parentSuite","value":"tests.endpoints"},{"name":"suite","value":"test_users"},{"name":"host","value":"fv-az654-267"},{"name":"thread","value":"2332-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.endpoints.test_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"x_task_value","value":"'api-4'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"8bd36d6b180a290c.json","parameterValues":["'api-4'"]}