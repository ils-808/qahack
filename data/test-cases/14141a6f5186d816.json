{"uid":"14141a6f5186d816","name":"test_validate_payment[api-19]","fullName":"tests.endpoints.test_payments#test_validate_payment","historyId":"5dad880742ddfd39d1015f29f76581bb","time":{"start":1733084009852,"stop":1733084013787,"duration":3935},"status":"failed","statusMessage":"AssertionError: Response validation failed: 2 validation errors for PaymentResponse\n  created_at\n    Field required [type=missing, input_value={'amount': 5999, 'order_u...4776-b2ee-2fec3b37c303'}, input_type=dict]\n      For further information visit https://errors.pydantic.dev/2.9/v/missing\n  updated_at\n    Field required [type=missing, input_value={'amount': 5999, 'order_u...4776-b2ee-2fec3b37c303'}, input_type=dict]\n      For further information visit https://errors.pydantic.dev/2.9/v/missing\nassert False","statusTrace":"api_client = <api_handler.api_client.ApiClient object at 0x7fa814c85730>\nx_task_value = 'api-19'\n\n    @allure.feature(\"Orders API\")\n    @allure.story(\"Duplicate item in order\")\n    @pytest.mark.parametrize(\"x_task_value\", [\"api-19\"])\n    def test_validate_payment(api_client, x_task_value):\n        users_response = api_client.get_users(x_task_value, 0)\n        users_dto = Users(**users_response.json())\n    \n        user_uuid = users_dto.users[0].uuid\n    \n        games = api_client.get_games(x_task_value)\n        games_dto = GamesResponse(**games.json())\n        game_uuid = games_dto.games[0].uuid\n    \n        order_data = OrderItemList(items=[\n            OrderItem(item_uuid=game_uuid, quantity=1)\n        ])\n    \n        create_order = api_client.order_create(user_uuid, order_data.model_dump(), x_task_value)\n        orders = Order(**create_order.json())\n        order_uuid = orders.uuid\n    \n        payment = PaymentRequest(order_uuid=order_uuid, payment_method=\"card\")\n    \n        payment_response = api_client.create_payment(user_uuid, payment, x_task_value)\n        payment = PaymentResponse(**payment_response.json())\n        get_payments = api_client.get_payment(payment.uuid, x_task_value)\n    \n        try:\n>           PaymentResponse(**get_payments.json())\nE           pydantic_core._pydantic_core.ValidationError: 2 validation errors for PaymentResponse\nE           created_at\nE             Field required [type=missing, input_value={'amount': 5999, 'order_u...4776-b2ee-2fec3b37c303'}, input_type=dict]\nE               For further information visit https://errors.pydantic.dev/2.9/v/missing\nE           updated_at\nE             Field required [type=missing, input_value={'amount': 5999, 'order_u...4776-b2ee-2fec3b37c303'}, input_type=dict]\nE               For further information visit https://errors.pydantic.dev/2.9/v/missing\n\ntests/endpoints/test_payments.py:37: ValidationError\n\nDuring handling of the above exception, another exception occurred:\n\napi_client = <api_handler.api_client.ApiClient object at 0x7fa814c85730>\nx_task_value = 'api-19'\n\n    @allure.feature(\"Orders API\")\n    @allure.story(\"Duplicate item in order\")\n    @pytest.mark.parametrize(\"x_task_value\", [\"api-19\"])\n    def test_validate_payment(api_client, x_task_value):\n        users_response = api_client.get_users(x_task_value, 0)\n        users_dto = Users(**users_response.json())\n    \n        user_uuid = users_dto.users[0].uuid\n    \n        games = api_client.get_games(x_task_value)\n        games_dto = GamesResponse(**games.json())\n        game_uuid = games_dto.games[0].uuid\n    \n        order_data = OrderItemList(items=[\n            OrderItem(item_uuid=game_uuid, quantity=1)\n        ])\n    \n        create_order = api_client.order_create(user_uuid, order_data.model_dump(), x_task_value)\n        orders = Order(**create_order.json())\n        order_uuid = orders.uuid\n    \n        payment = PaymentRequest(order_uuid=order_uuid, payment_method=\"card\")\n    \n        payment_response = api_client.create_payment(user_uuid, payment, x_task_value)\n        payment = PaymentResponse(**payment_response.json())\n        get_payments = api_client.get_payment(payment.uuid, x_task_value)\n    \n        try:\n            PaymentResponse(**get_payments.json())\n        except ValidationError as e:\n            print(\"ValidationError:\", e)\n>           assert False, f\"Response validation failed: {e}\"\nE           AssertionError: Response validation failed: 2 validation errors for PaymentResponse\nE             created_at\nE               Field required [type=missing, input_value={'amount': 5999, 'order_u...4776-b2ee-2fec3b37c303'}, input_type=dict]\nE                 For further information visit https://errors.pydantic.dev/2.9/v/missing\nE             updated_at\nE               Field required [type=missing, input_value={'amount': 5999, 'order_u...4776-b2ee-2fec3b37c303'}, input_type=dict]\nE                 For further information visit https://errors.pydantic.dev/2.9/v/missing\nE           assert False\n\ntests/endpoints/test_payments.py:40: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1733083997555,"stop":1733083997556,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"api_client","time":{"start":1733083997556,"stop":1733083997556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"worker_id","time":{"start":1733083997556,"stop":1733083997556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"base_url","time":{"start":1733083997556,"stop":1733083997556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"setup_test","time":{"start":1733083997556,"stop":1733083999665,"duration":2109},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Response validation failed: 2 validation errors for PaymentResponse\n  created_at\n    Field required [type=missing, input_value={'amount': 5999, 'order_u...4776-b2ee-2fec3b37c303'}, input_type=dict]\n      For further information visit https://errors.pydantic.dev/2.9/v/missing\n  updated_at\n    Field required [type=missing, input_value={'amount': 5999, 'order_u...4776-b2ee-2fec3b37c303'}, input_type=dict]\n      For further information visit https://errors.pydantic.dev/2.9/v/missing\nassert False","statusTrace":"api_client = <api_handler.api_client.ApiClient object at 0x7fa814c85730>\nx_task_value = 'api-19'\n\n    @allure.feature(\"Orders API\")\n    @allure.story(\"Duplicate item in order\")\n    @pytest.mark.parametrize(\"x_task_value\", [\"api-19\"])\n    def test_validate_payment(api_client, x_task_value):\n        users_response = api_client.get_users(x_task_value, 0)\n        users_dto = Users(**users_response.json())\n    \n        user_uuid = users_dto.users[0].uuid\n    \n        games = api_client.get_games(x_task_value)\n        games_dto = GamesResponse(**games.json())\n        game_uuid = games_dto.games[0].uuid\n    \n        order_data = OrderItemList(items=[\n            OrderItem(item_uuid=game_uuid, quantity=1)\n        ])\n    \n        create_order = api_client.order_create(user_uuid, order_data.model_dump(), x_task_value)\n        orders = Order(**create_order.json())\n        order_uuid = orders.uuid\n    \n        payment = PaymentRequest(order_uuid=order_uuid, payment_method=\"card\")\n    \n        payment_response = api_client.create_payment(user_uuid, payment, x_task_value)\n        payment = PaymentResponse(**payment_response.json())\n        get_payments = api_client.get_payment(payment.uuid, x_task_value)\n    \n        try:\n>           PaymentResponse(**get_payments.json())\nE           pydantic_core._pydantic_core.ValidationError: 2 validation errors for PaymentResponse\nE           created_at\nE             Field required [type=missing, input_value={'amount': 5999, 'order_u...4776-b2ee-2fec3b37c303'}, input_type=dict]\nE               For further information visit https://errors.pydantic.dev/2.9/v/missing\nE           updated_at\nE             Field required [type=missing, input_value={'amount': 5999, 'order_u...4776-b2ee-2fec3b37c303'}, input_type=dict]\nE               For further information visit https://errors.pydantic.dev/2.9/v/missing\n\ntests/endpoints/test_payments.py:37: ValidationError\n\nDuring handling of the above exception, another exception occurred:\n\napi_client = <api_handler.api_client.ApiClient object at 0x7fa814c85730>\nx_task_value = 'api-19'\n\n    @allure.feature(\"Orders API\")\n    @allure.story(\"Duplicate item in order\")\n    @pytest.mark.parametrize(\"x_task_value\", [\"api-19\"])\n    def test_validate_payment(api_client, x_task_value):\n        users_response = api_client.get_users(x_task_value, 0)\n        users_dto = Users(**users_response.json())\n    \n        user_uuid = users_dto.users[0].uuid\n    \n        games = api_client.get_games(x_task_value)\n        games_dto = GamesResponse(**games.json())\n        game_uuid = games_dto.games[0].uuid\n    \n        order_data = OrderItemList(items=[\n            OrderItem(item_uuid=game_uuid, quantity=1)\n        ])\n    \n        create_order = api_client.order_create(user_uuid, order_data.model_dump(), x_task_value)\n        orders = Order(**create_order.json())\n        order_uuid = orders.uuid\n    \n        payment = PaymentRequest(order_uuid=order_uuid, payment_method=\"card\")\n    \n        payment_response = api_client.create_payment(user_uuid, payment, x_task_value)\n        payment = PaymentResponse(**payment_response.json())\n        get_payments = api_client.get_payment(payment.uuid, x_task_value)\n    \n        try:\n            PaymentResponse(**get_payments.json())\n        except ValidationError as e:\n            print(\"ValidationError:\", e)\n>           assert False, f\"Response validation failed: {e}\"\nE           AssertionError: Response validation failed: 2 validation errors for PaymentResponse\nE             created_at\nE               Field required [type=missing, input_value={'amount': 5999, 'order_u...4776-b2ee-2fec3b37c303'}, input_type=dict]\nE                 For further information visit https://errors.pydantic.dev/2.9/v/missing\nE             updated_at\nE               Field required [type=missing, input_value={'amount': 5999, 'order_u...4776-b2ee-2fec3b37c303'}, input_type=dict]\nE                 For further information visit https://errors.pydantic.dev/2.9/v/missing\nE           assert False\n\ntests/endpoints/test_payments.py:40: AssertionError","steps":[],"attachments":[{"uid":"2849704d4a41cfa5","name":"log","source":"2849704d4a41cfa5.txt","type":"text/plain","size":5162},{"uid":"277e1d00ca864f7c","name":"stdout","source":"277e1d00ca864f7c.txt","type":"text/plain","size":461},{"uid":"c13134950690293b","name":"stderr","source":"c13134950690293b.txt","type":"text/plain","size":5126}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup_test::0","time":{"start":1733084013792,"stop":1733084013792,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Duplicate item in order"},{"name":"feature","value":"Orders API"},{"name":"parentSuite","value":"tests.endpoints"},{"name":"suite","value":"test_payments"},{"name":"host","value":"fv-az1538-756"},{"name":"thread","value":"2367-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.endpoints.test_payments"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"x_task_value","value":"'api-19'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"14141a6f5186d816.json","parameterValues":["'api-19'"]}