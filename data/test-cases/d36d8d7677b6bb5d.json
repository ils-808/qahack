{"uid":"d36d8d7677b6bb5d","name":"test_get_single_user[api-23]","fullName":"tests.endpoints.test_users#test_get_single_user","historyId":"6e18ee0cc37d55078c7657684fb84445","time":{"start":1733062522816,"stop":1733062525254,"duration":2438},"status":"failed","statusMessage":"AssertionError: User ID mismatch: b0be69cc-0076-4843-b29f-93cdddd03542\nassert 'b0be69cc-007...-93cdddd03542' == '2db746fe-21c...-d418a9e3c428'\n  \n  - 2db746fe-21c2-46d7-9cc6-d418a9e3c428\n  + b0be69cc-0076-4843-b29f-93cdddd03542","statusTrace":"api_client = <api_handler.ApiClient.ApiClient object at 0x7f1abd196c60>\nx_task_value = 'api-23'\n\n    @allure.feature(\"User API\")\n    @allure.story(\"Get user\")\n    @pytest.mark.parametrize(\"x_task_value\", [\"api-23\"])\n    def test_get_single_user(api_client, x_task_value):\n        users_response = api_client.get_users(x_task_value, 0)\n        users = Users(**users_response.json())\n        user_uuid = users.users[len(users.users) - 1].uuid\n    \n        user_response = api_client.get_user(user_uuid, x_task_value)\n        user = UserBase(**user_response.json())\n    \n>       assert user.uuid == user_uuid, f\"User ID mismatch: {user.uuid}\"\nE       AssertionError: User ID mismatch: b0be69cc-0076-4843-b29f-93cdddd03542\nE       assert 'b0be69cc-007...-93cdddd03542' == '2db746fe-21c...-d418a9e3c428'\nE         \nE         - 2db746fe-21c2-46d7-9cc6-d418a9e3c428\nE         + b0be69cc-0076-4843-b29f-93cdddd03542\n\ntests/endpoints/test_users.py:103: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1733062449933,"stop":1733062449934,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"base_url","time":{"start":1733062522816,"stop":1733062522816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"api_client","time":{"start":1733062522816,"stop":1733062522816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: User ID mismatch: b0be69cc-0076-4843-b29f-93cdddd03542\nassert 'b0be69cc-007...-93cdddd03542' == '2db746fe-21c...-d418a9e3c428'\n  \n  - 2db746fe-21c2-46d7-9cc6-d418a9e3c428\n  + b0be69cc-0076-4843-b29f-93cdddd03542","statusTrace":"api_client = <api_handler.ApiClient.ApiClient object at 0x7f1abd196c60>\nx_task_value = 'api-23'\n\n    @allure.feature(\"User API\")\n    @allure.story(\"Get user\")\n    @pytest.mark.parametrize(\"x_task_value\", [\"api-23\"])\n    def test_get_single_user(api_client, x_task_value):\n        users_response = api_client.get_users(x_task_value, 0)\n        users = Users(**users_response.json())\n        user_uuid = users.users[len(users.users) - 1].uuid\n    \n        user_response = api_client.get_user(user_uuid, x_task_value)\n        user = UserBase(**user_response.json())\n    \n>       assert user.uuid == user_uuid, f\"User ID mismatch: {user.uuid}\"\nE       AssertionError: User ID mismatch: b0be69cc-0076-4843-b29f-93cdddd03542\nE       assert 'b0be69cc-007...-93cdddd03542' == '2db746fe-21c...-d418a9e3c428'\nE         \nE         - 2db746fe-21c2-46d7-9cc6-d418a9e3c428\nE         + b0be69cc-0076-4843-b29f-93cdddd03542\n\ntests/endpoints/test_users.py:103: AssertionError","steps":[],"attachments":[{"uid":"f64d8eeed2ebb748","name":"log","source":"f64d8eeed2ebb748.txt","type":"text/plain","size":2049},{"uid":"de3243976a393d70","name":"stderr","source":"de3243976a393d70.txt","type":"text/plain","size":38779}],"parameters":[],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"story","value":"Get user"},{"name":"feature","value":"User API"},{"name":"parentSuite","value":"tests.endpoints"},{"name":"suite","value":"test_users"},{"name":"host","value":"fv-az915-185"},{"name":"thread","value":"2322-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.endpoints.test_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"x_task_value","value":"'api-23'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d36d8d7677b6bb5d.json","parameterValues":["'api-23'"]}