{"uid":"ec17237583c64821","name":"test_create_user_nick_used[api-3]","fullName":"tests.endpoints.test_users#test_create_user_nick_used","historyId":"323c4dc35ac72476fddb254216e4925d","time":{"start":1733076269267,"stop":1733076270640,"duration":1373},"status":"failed","statusMessage":"AssertionError: Empty nickname\nassert ''\n +  where '' = UserBase(uuid='681be40c-f8f2-4938-ad21-fdcd80b52099', nickname='', name='Stacey Davis', email='nicholaswhite@example.com', password='\"HA\"R\"HA\"R', phone=None, userStatus=None, avatar_url='').nickname\n +    where UserBase(uuid='681be40c-f8f2-4938-ad21-fdcd80b52099', nickname='', name='Stacey Davis', email='nicholaswhite@example.com', password='\"HA\"R\"HA\"R', phone=None, userStatus=None, avatar_url='') = UserBase(**{'avatar_url': '', 'email': 'nicholaswhite@example.com', 'name': 'Stacey Davis', 'nickname': '', ...})\n +      where {'avatar_url': '', 'email': 'nicholaswhite@example.com', 'name': 'Stacey Davis', 'nickname': '', ...} = json()\n +        where json = <Response [200]>.json","statusTrace":"api_client = <api_handler.ApiClient.ApiClient object at 0x7f431cdec860>\nx_task_value = 'api-3'\n\n    @allure.feature(\"User API\")\n    @allure.story(\"User creation\")\n    @pytest.mark.parametrize(\"x_task_value\", [\"api-3\"])\n    def test_create_user_nick_used(api_client, x_task_value):\n        dto = UserBase(email=f.email(), nickname=f.user_name(), password=f.password(), name=f.name())\n        dto.model_dump(exclude_none=True)\n        response = api_client.create_user(dto, x_task_value)\n    \n>       assert UserBase(**response.json()).nickname, f\"Empty nickname\"\nE       AssertionError: Empty nickname\nE       assert ''\nE        +  where '' = UserBase(uuid='681be40c-f8f2-4938-ad21-fdcd80b52099', nickname='', name='Stacey Davis', email='nicholaswhite@example.com', password='\"HA\"R\"HA\"R', phone=None, userStatus=None, avatar_url='').nickname\nE        +    where UserBase(uuid='681be40c-f8f2-4938-ad21-fdcd80b52099', nickname='', name='Stacey Davis', email='nicholaswhite@example.com', password='\"HA\"R\"HA\"R', phone=None, userStatus=None, avatar_url='') = UserBase(**{'avatar_url': '', 'email': 'nicholaswhite@example.com', 'name': 'Stacey Davis', 'nickname': '', ...})\nE        +      where {'avatar_url': '', 'email': 'nicholaswhite@example.com', 'name': 'Stacey Davis', 'nickname': '', ...} = json()\nE        +        where json = <Response [200]>.json\n\ntests/endpoints/test_users.py:17: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1733076266681,"stop":1733076266682,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"base_url","time":{"start":1733076266682,"stop":1733076266682,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"setup_test","time":{"start":1733076266683,"stop":1733076269266,"duration":2583},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"api_client","time":{"start":1733076266683,"stop":1733076266683,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"worker_id","time":{"start":1733076266683,"stop":1733076266683,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Empty nickname\nassert ''\n +  where '' = UserBase(uuid='681be40c-f8f2-4938-ad21-fdcd80b52099', nickname='', name='Stacey Davis', email='nicholaswhite@example.com', password='\"HA\"R\"HA\"R', phone=None, userStatus=None, avatar_url='').nickname\n +    where UserBase(uuid='681be40c-f8f2-4938-ad21-fdcd80b52099', nickname='', name='Stacey Davis', email='nicholaswhite@example.com', password='\"HA\"R\"HA\"R', phone=None, userStatus=None, avatar_url='') = UserBase(**{'avatar_url': '', 'email': 'nicholaswhite@example.com', 'name': 'Stacey Davis', 'nickname': '', ...})\n +      where {'avatar_url': '', 'email': 'nicholaswhite@example.com', 'name': 'Stacey Davis', 'nickname': '', ...} = json()\n +        where json = <Response [200]>.json","statusTrace":"api_client = <api_handler.ApiClient.ApiClient object at 0x7f431cdec860>\nx_task_value = 'api-3'\n\n    @allure.feature(\"User API\")\n    @allure.story(\"User creation\")\n    @pytest.mark.parametrize(\"x_task_value\", [\"api-3\"])\n    def test_create_user_nick_used(api_client, x_task_value):\n        dto = UserBase(email=f.email(), nickname=f.user_name(), password=f.password(), name=f.name())\n        dto.model_dump(exclude_none=True)\n        response = api_client.create_user(dto, x_task_value)\n    \n>       assert UserBase(**response.json()).nickname, f\"Empty nickname\"\nE       AssertionError: Empty nickname\nE       assert ''\nE        +  where '' = UserBase(uuid='681be40c-f8f2-4938-ad21-fdcd80b52099', nickname='', name='Stacey Davis', email='nicholaswhite@example.com', password='\"HA\"R\"HA\"R', phone=None, userStatus=None, avatar_url='').nickname\nE        +    where UserBase(uuid='681be40c-f8f2-4938-ad21-fdcd80b52099', nickname='', name='Stacey Davis', email='nicholaswhite@example.com', password='\"HA\"R\"HA\"R', phone=None, userStatus=None, avatar_url='') = UserBase(**{'avatar_url': '', 'email': 'nicholaswhite@example.com', 'name': 'Stacey Davis', 'nickname': '', ...})\nE        +      where {'avatar_url': '', 'email': 'nicholaswhite@example.com', 'name': 'Stacey Davis', 'nickname': '', ...} = json()\nE        +        where json = <Response [200]>.json\n\ntests/endpoints/test_users.py:17: AssertionError","steps":[],"attachments":[{"uid":"2aa90f543fdefd5d","name":"log","source":"2aa90f543fdefd5d.txt","type":"text/plain","size":653},{"uid":"2e26d9914e8bfea0","name":"stderr","source":"2e26d9914e8bfea0.txt","type":"text/plain","size":648}],"parameters":[],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup_test::0","time":{"start":1733076288690,"stop":1733076288690,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"User creation"},{"name":"feature","value":"User API"},{"name":"parentSuite","value":"tests.endpoints"},{"name":"suite","value":"test_users"},{"name":"host","value":"fv-az1980-633"},{"name":"thread","value":"2346-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.endpoints.test_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"x_task_value","value":"'api-3'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ec17237583c64821.json","parameterValues":["'api-3'"]}